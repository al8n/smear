"Complex fragment definitions with arguments, generics, inline fragments, and spreads"

fragment<T> UserFields<T>($includeEmail: Boolean! = true, $limit: Int) on User<T> {
  id
  name
  email @include(if: $includeEmail)
  data
  posts(first: $limit) {
    id
    title
  }
}

fragment<K, V> ConnectionFields<K, V> on Connection<K, V> {
  edges(first: Int!, after: Int!) {
    node {
      key
      value
    }
    cursor
  }
  pageInfo {
    hasNextPage
    hasPreviousPage
    totalCount
  }
}

query GetUserData<T>($userId: ID!, $includePrivate: Boolean = false) {
  user(id: $userId) {
    ...UserFields<T>(includeEmail: true, limit: 10)

    ... on PremiumUser {
      subscriptionLevel
      features(active: true)
    }

    ... on AdminUser {
      permissions
      role
      auditLog(limit: 50) {
        action
        timestamp
      }
    }

    profile {
      ... on PublicProfile {
        displayName
        avatar(size: LARGE)
      }
      ... on PrivateProfile @include(if: $includePrivate) {
        settings
        preferences
      }
    }
  }

  connections(first: 20) {
    ...ConnectionFields<String, Int>(first: 20, after: null, orderBy: DESC)
  }
}

fragment<T> NodeFragment<T>(
  $depth: Int = 1
  $includeMetadata: Boolean!
) on Node<T>
  where T: Timestamped & Serializable
{
  id
  createdAt
  updatedAt
  data

  ... on Document<T> {
    title
    content(maxLength: 1000)
    metadata @include(if: $includeMetadata) {
      tags
      category
    }
    versions(last: $depth) {
      version
      timestamp
    }
  }

  ... on Media<T> {
    url
    metadata @include(if: $includeMetadata)
    thumbnail(width: 200, height: 200)
  }
}

query ComplexQuery<T, U>(
  $filterBy: String
  $sortOrder: SortOrder = ASC
  $includeRelated: Boolean = true
) {
  items(filter: $filterBy, sort: $sortOrder) {
    ...NodeFragment<T>(depth: 2, includeMetadata: true)

    ... {
      typename: __typename
      inlineField
    }

    related @include(if: $includeRelated) {
      ...NodeFragment<U>(depth: 1, includeMetadata: false)
    }
  }
}

fragment NestedFragmentSpread($maxPosts: Int = 5) on Post {
  id
  title
  author {
    ...UserFields<String>(includeEmail: false, limit: $maxPosts)
    posts(first: $maxPosts, orderBy: RECENT) {
      ...PostPreview
    }
  }
  comments(first: 10) {
    author {
      ...UserFields<String>(includeEmail: false)
    }
    content
  }
}

fragment PostPreview on Post {
  id
  title
  excerpt(length: 200)
  tags

  ... on PublishedPost {
    publishedAt
    views
    reactions(type: LIKE) {
      count
      users(first: 3) {
        id
        name
      }
    }
  }

  ... on DraftPost {
    lastEditedAt
    editor {
      id
      name
    }
  }
}

fragment<T> RecursiveFragment<T>(
  $maxDepth: Int!
  $includeChildren: Boolean = true
) on TreeNode<T> {
  id
  value
  parent {
    id
    value
  }
  children(maxDepth: $maxDepth) @include(if: $includeChildren) {
    id
    value
    ...RecursiveFragment<T>(maxDepth: $maxDepth, includeChildren: false)
  }
}
