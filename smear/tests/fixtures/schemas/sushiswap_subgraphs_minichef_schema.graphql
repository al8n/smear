type MiniChef @entity {
  # Contract address
  id: ID!

  sushi: Bytes!
  sushiPerSecond: BigInt!
  totalAllocPoint: BigInt!

  pools: [Pool!] @derivedFrom(field: "miniChef")
  poolCount: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Pool @entity {
  id: ID!
  miniChef: MiniChef!
  pair: Bytes!

  rewarder: Rewarder

  allocPoint: BigInt!
  lastRewardTime: BigInt!
  accSushiPerShare: BigInt!

  slpBalance: BigInt!

  users: [User!]! @derivedFrom(field: "pool")
  userCount: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type NativeRewarderPool @entity {
  id: ID!

  allocPoint: BigInt!
}

type Rewarder @entity {
  id: ID!
  rewardToken: Bytes!
  rewardPerSecond: BigInt!

  totalAllocPoint: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type User @entity {
  id: ID!

  address: Bytes!
  pool: Pool

  amount: BigInt!
  rewardDebt: BigInt!
  sushiHarvested: BigInt!

  timestamp: BigInt!
  block: BigInt!
}
