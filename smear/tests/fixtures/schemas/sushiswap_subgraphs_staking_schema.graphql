
type Global @entity {
  id: ID! # Hardcoded to 'Global'
  transactionCount: BigInt!
}

type User @entity {
  id: ID!
  stakePositions: [StakePosition!] @derivedFrom(field: "user")
  rewards: [Reward!] @derivedFrom(field: "user")
  subscriptions: [_Subscription!] @derivedFrom(field: "user")
  transactions: [Transaction!] @derivedFrom(field: "user")
  totalSubscriptionCount: BigInt!
  activeSubscriptionCount: BigInt!
}


type Token @entity {
  id: ID!
  type: String!
  symbol: String!
  symbolSuccess: Boolean!
  assets: [String!]
  name: String!
  nameSuccess: Boolean!
  decimals: BigInt!
  decimalsSuccess: Boolean!
  incentives: [Incentive!] @derivedFrom(field: "stakeToken")
}

type StakePosition @entity {
  id: ID!
  user: User!
  token: Token!
  farm: Farm!
  liquidity: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
}

type Reward @entity {
  id: ID!
  user: User!
  token: Token!
  incentive: Incentive!
  claimedAmount: BigInt!
  claimableAmount: BigDecimal!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
}

type Farm @entity {
  id: ID!
  stakeToken: Token!
  incentives: [Incentive!]! @derivedFrom(field: "farm")
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
}

type Incentive @entity {
  id: ID!
  farm: Farm!
  stakeToken: Token!
  rewardToken: Token!
  rewardsAccrued: BigInt! 
  rewardsRemaining: BigInt! # Updates on every event, frontend can calculate remaining rewards with modifiedAtTimestamp as starting point
  startTime: BigInt!
  endTime: BigInt!
  liquidityStaked: BigInt!
  subscriptions: [_Subscription!] @derivedFrom(field: "incentive")
  rewards: [Reward!]!
  createdBy: User!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
  rewardsUpdatedAtBlock: BigInt!
  rewardsUpdatedAtTimestamp: BigInt!
}

type _Subscription @entity { # requires underscore prefix, Subscription is default keyword in graphql
  id: ID!
  user: User!
  incentive: Incentive!
  reward: Reward!
  token: Token!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
}

enum TransactionType {
  STAKE
  UNSTAKE
  CLAIM
}

type Transaction @entity {
  id: ID!
  type: TransactionType!
  farm: Farm!
  incentive: Incentive
  amount: BigInt!
  user: User!
  to: User!
  token: Token!
  txHash: String!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
}
