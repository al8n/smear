enum PairType {
  CONSTANT_PRODUCT_POOL
}

type Factory @entity {
  " Contract address "
  id: ID!
  " Factory type "
  type: PairType!
  " Pair count "
  pairCount: BigInt!
  " Token count "
  tokenCount: BigInt!
}


type Token @entity {
  " Token address "
  id: ID!
  " Symbol of the token "
  symbol: String!
  " if symbol was successfully retrieved "
  symbolSuccess: Boolean!
  " Name of the token "
  name: String!
  " if name was successfully retrieved "
  nameSuccess: Boolean!
  " Decimals of the token "
  decimals: BigInt!
  " if decimals were successfully retrieved "
  decimalsSuccess: Boolean!
  " Count of all the pairs "
  pairCount: BigInt!

  " All pairs where this token is involved in "
  pairs: [_TokenPair!]! @derivedFrom(field: "token")
}

type _TokenPair @entity(immutable: true) {
  " id is created by combining token.id and count, e.g. 0x00x00:1 "
  id: ID!
  " Pair "
  pair: Pair!
  " Token "
  token: Token!
}

type Pair @entity {
  " Pair address (contract address) "
  id: ID!
  " Pair type "
  type: PairType!
  " Swap fee "
  swapFee: BigInt!
  " TWAP - time weighted average price "
  twapEnabled: Boolean!
  " name of the pair, this combines symbol of both tokens, e.g. WETH/SUSHI "
  name: String!
  " First Token "
  token0: Token!
  " Second Token "
  token1: Token!
  " Which source this pair comes from, in this case it will always be 'LEGACY' "
  source: String!
  " Which block this pair was created on "
  createdAtBlock: BigInt!
  " When this pair was created "
  createdAtTimestamp: BigInt!

  " Liquidity of first token "
  reserve0: BigInt!
  " Liquidity of second token "
  reserve1: BigInt!
}
