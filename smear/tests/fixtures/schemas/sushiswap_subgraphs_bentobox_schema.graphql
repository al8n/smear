type BentoBox @entity(immutable: true) {
  " BentoBox address "
  id: ID!
  " Protocols that belong to this bento box "
  protocols: [Protocol!] @derivedFrom(field: "bentoBox")
  " Users that belong to this bento box "
  users: [User!] @derivedFrom(field: "bentoBox")
  " Tokens that belong to this bento box "
  tokens: [Token!] @derivedFrom(field: "bentoBox")
  " Master contracts that belong to this bento box "
  masterContracts: [MasterContract!]! @derivedFrom(field: "bentoBox")
  " Clones that belong to this bento box "
  clones: [Clone!] @derivedFrom(field: "bentoBox")
  " Flash loans that belong to this bento box "
  flashloans: [FlashLoan!] @derivedFrom(field: "bentoBox")
  " Transactions that belong to this bento box "
  transactions: [Transaction!] @derivedFrom(field: "bentoBox")
  " Totals that belong to this bento box "
  totals: [Rebase!] @derivedFrom(field: "bentoBox")
}

type BentoBoxKpi @entity {
  " BentoBox address "
  id: ID!
  " Deposit count "
  depositCount: BigInt!
  " Withdraw count "
  withdrawCount: BigInt!
  " Transfer count "
  transferCount: BigInt!
  " Protocol count "
  protocolCount: BigInt!
  " User count "
  userCount: BigInt!
  " Token count "
  tokenCount: BigInt!
  " Master contract count "
  masterContractCount: BigInt!
  " Clone count "
  cloneCount: BigInt!
  " Flash loan count "
  flashloanCount: BigInt!
  " Transaction count "
  transactionCount: BigInt!
  " Strategy count "
  strategyCount: BigInt!
  " Active strategy count "
  activeStrategyCount: BigInt!
  " Pending strategy count "
  pendingStrategyCount: BigInt!
}

type MasterContract @entity {
  " MasterContract address "
  id: ID!
  " BentoBox this master contract belongs to "
  bentoBox: BentoBox!
  " Clones that belong to this master contract "
  clones: [Clone!] @derivedFrom(field: "masterContract")
  " MasterContractApprovals that belong to this master contract "
  masterContractApprovals: [MasterContractApproval!] @derivedFrom(field: "masterContract")
  " MasterContract is whitelisted by Sushi Operations"
  approved: Boolean!
}

type MasterContractApproval @entity {
  "Concatenation of user adddress and master contract address"
  id: ID!
  " MasterContract this master contract approval belongs to "
  masterContract: MasterContract!
  " User this master contract approval belongs to "
  user: User!
  " If user has approved this master contract "
  approved: Boolean!
}

type Clone @entity(immutable: true) {
  " Clone address "
  id: ID!
  " BentoBox this clone belongs to "
  bentoBox: BentoBox!
  " Master contract this clone belongs to "
  masterContract: MasterContract!
  " Clone data "
  data: Bytes!
  " Block number of this clone "
  block: BigInt!
  " Timestamp of this clone "
  timestamp: BigInt!
}

type Token @entity(immutable: true) {
  " Token address "
  id: ID!
  " The BentoBox this token belongs to "
  bentoBox: BentoBox!
  " The Rebase that belongs to this token "
  rebase: Rebase!
  " Strategies, past and present, which belong to this token "
  strategies: [Strategy!] @derivedFrom(field: "token")
  " The Kpi which belong to this token "
  kpi: TokenKpi!
  " Token symbol, if fetched successfully, else default to ??? "
  symbol: String!
  " If the symbol was succesfully fetched "
  symbolSuccess: Boolean!
  " Token name, if fetched successfully, else default to ??? "
  name: String!
  " If the name was succesfully fetched "
  nameSuccess: Boolean!
  " Token decimals, if fetched successfully, else default to 18 "
  decimals: BigInt!
  " If the decimals was succesfully fetched "
  decimalsSuccess: Boolean!
}

type TokenKpi @entity {
  " Token address "
  id: ID!
  " Token that belongs to this Kpi "
  token: Token!
  " Liquidity "
  liquidity: BigInt!
  " Strategy count "
  strategyCount: BigInt!
  " Token Strategy APR "
  apr: BigDecimal
}

type TokenStrategy @entity {
  " Token address "
  id: ID!
  " The Token this strategy belongs to "
  token: Token!
  " Strategy address "
  strategy: Strategy
  " Pending strategy address "
  pendingStrategy: Strategy
  " The Strategy data "
  data: StrategyData!
  " The block number of this strategy "
  block: BigInt!
  " The timestamp of this strategy "
  timestamp: BigInt!
}

type Strategy @entity(immutable: true) {
  " Strategy address "
  id: ID!
  " StrategyKpi of this strategy "
  kpi: StrategyKpi!
  " Harvests which belong to this strategy "
  harvests: [Harvest!] @derivedFrom(field: "strategy")
  " The Token this strategy belongs to "
  token: Token!
  " Block number of this strategy "
  block: BigInt!
  " Timestamp of this strategy "
  timestamp: BigInt!
}

type StrategyData @entity {
  " Token address "
  id: ID!
  " Strategy start date "
  strategyStartDate: BigInt!
  " Target percentage "
  targetPercentage: BigInt!
  " BentoBox's understanding of the balance "
  balance: BigInt!
}

type StrategyKpi @entity {
  " Strategy address "
  id: ID!
  " Harvest count "
  harvestCount: BigInt!
  " Invest or divest count "
  investOrDivestCount: BigInt!
  " Invest count "
  investCount: BigInt!
  " Invested "
  invested: BigInt!
  " Divest count "
  divestCount: BigInt!
  " Divested"
  divested: BigInt!
  " Profit or loss count "
  profitOrLossCount: BigInt!
  " Profit count "
  profitCount: BigInt!
  " Loss count "
  lossCount: BigInt!
  " Profit & Loss"
  profitAndLoss: BigInt!
  " Isolated Strategy APR "
  apr: BigDecimal
  " Utilization "
  utilization: BigDecimal
}

type Harvest @entity {
  " Concatenation of strategy and block number "
  id: ID!
  " The Token this harvest belongs to "
  token: Token!
  " The Strategy this harvest belongs to "
  strategy: Strategy!
  " The ProfitOrLoss of this harvest "
  profitOrLoss: ProfitOrLoss
  " The InvestOrDivest of this harvest "
  investOrDivest: InvestOrDivest
  " Block number of this harvest "
  block: BigInt!
  " Timestamp of this harvest "
  timestamp: BigInt!
}

type ProfitOrLoss @entity(immutable: true) {
  " Concatenation of strategy and profit or loss count "
  id: ID!
  " The Harvest this profit or loss belongs to "
  harvest: Harvest!
  " The cached token elastic at time of profit or loss"
  elastic: BigInt!
  " The cached token base at time of profit or loss"
  base: BigInt!
  " Amount of profit or loss "
  amount: BigInt!
  " Block number of this profit or loss "
  block: BigInt!
  " Timestamp of this profit or loss "
  timestamp: BigInt!
}

type InvestOrDivest @entity(immutable: true) {
  " Concatenation of strategy and invest or divest count "
  id: ID!
  " The Harvest this invest or divest belongs to "
  harvest: Harvest!
  " The cached token elastic at time of invest or divest"
  elastic: BigInt!
  " The cached token base at time of invest or divest"
  base: BigInt!
  " Amount of invest or divest "
  amount: BigInt!
  " Block number of this invest or divest "
  block: BigInt!
  " Timestamp of this invest or divest "
  timestamp: BigInt!
}

type Rebase @entity {
  " Token address "
  id: ID!
  " BentoBox this rebase belongs to "
  bentoBox: BentoBox!
  " Token this rebase belongs to "
  token: Token!
  " Base (Share) "
  base: BigInt!
  " Elastic (Amount) "
  elastic: BigInt!
}

type FlashLoan @entity(immutable: true) {
  " Concatenation of transaction and log index "
  id: ID!
  " BentoBox this flash loan belongs to "
  bentoBox: BentoBox!
  " Borrower address "
  borrower: Bytes!
  " Receiver address "
  receiver: Bytes!
  " Token this flash loan belongs to "
  token: Token!
  " Amount of this flash loan "
  amount: BigInt!
  " Fee amount of this flash loan "
  feeAmount: BigInt!
  " Block number of this flash loan "
  block: BigInt!
  " Timestamp of this flash loan "
  timestamp: BigInt!
}

type Protocol @entity(immutable: true) {
  " Protocol address "
  id: ID!
  " BentoBox this protocol belongs to "
  bentoBox: BentoBox!
}

type User @entity(immutable: true) {
  " User address "
  id: ID!
  " BentoBox this user belongs to "
  bentoBox: BentoBox!
  " MasterContractApprovals that belong to this user "
  masterContractApprovals: [MasterContractApproval!] @derivedFrom(field: "user")
  " Balances that belong to this user "
  balances: [Balance!] @derivedFrom(field: "user")
  " Block number of this user "
  block: BigInt!
  " Timestamp of this user "
  timestamp: BigInt!
}

type Balance @entity {
  id: ID!
  token: Token!
  user: User!
  # amount: BigInt!
  share: BigInt!
}

enum TransactionType {
  deposit
  transfer
  withdraw
}

type Transaction @entity(immutable: true) {
  " Concatenation of transaction hash and log index "
  id: ID!
  " BentoBox this transaction belongs to "
  bentoBox: BentoBox!
  " Transaction type "
  type: TransactionType!
  " User from whom this transaction is made "
  from: User!
  " User to whom the transaction is sent "
  to: User!
  " Token this transaction belongs to "
  token: Token!
  " Amount of this transaction "
  amount: BigInt
  " Share of this transaction "
  share: BigInt!
  " Block number of this transaction "
  block: BigInt!
  " Timestamp of this transaction "
  timestamp: BigInt!
}

type BentoBoxHourlyKpi @entity {
  " created by a prefix 'bentobox-hour-' and unix timestamp, e.g. 'bentobox-hour-1657270000'"
  id: ID!
  " Start date "
  date: Int!
  " Deposit count "
  depositCount: BigInt!
  " Deposit count for the given timeframe "
  newDepositCount: BigInt!
  " Withdraw count "
  withdrawCount: BigInt!
  " Withdraw count for the given timeframe "
  newWithdrawCount: BigInt!
  " Transfer count "
  transferCount: BigInt!
  " Transfer count for the given timeframe "
  newTransferCount: BigInt!
  " Protocol count "
  protocolCount: BigInt!
  " Protocol count for the given timeframe "
  newProtocolCount: BigInt!
  " User count "
  userCount: BigInt!
  " User count for the given timeframe "
  newUserCount: BigInt!
  " Token count "
  tokenCount: BigInt!
  " Token count for the given timeframe "
  newTokenCount: BigInt!
  " Master contract count "
  masterContractCount: BigInt!
  " Master contract count for the given timeframe "
  newMasterContractCount: BigInt!
  " Clone count "
  cloneCount: BigInt!
  " Clone count for the given timeframe "
  newCloneCount: BigInt!
  " Flash loan count "
  flashloanCount: BigInt!
  " Flash loan count for the given timeframe "
  newFlashloanCount: BigInt!
  " Transaction count "
  transactionCount: BigInt!
  " Transaction count for the given timeframe "
  newTransactionCount: BigInt!
  " Strategy count "
  strategyCount: BigInt!
  " Strategy for the given timeframe "
  newStrategyCount: BigInt!
  " Active strategy count "
  activeStrategyCount: BigInt!
  " Active strategy count given timeframe "
  newActiveStrategyCount: BigInt!
  " Pending strategy count "
  pendingStrategyCount: BigInt!
  " Pending strategy count given timeframe "
  newPendingStrategyCount: BigInt!
}

type BentoBoxDailyKpi @entity {
  " created by id, infix '-day-' and unix timestamp, e.g. '0x00..00-day-1657270000'"
  id: ID!
  " Start date "
  date: Int!
  " Deposit count "
  depositCount: BigInt!
  " Deposit count for the given timeframe "
  newDepositCount: BigInt!
  " Withdraw count "
  withdrawCount: BigInt!
  " Withdraw count for the given timeframe "
  newWithdrawCount: BigInt!
  " Transfer count "
  transferCount: BigInt!
  " Transfer count for the given timeframe "
  newTransferCount: BigInt!
  " Protocol count "
  protocolCount: BigInt!
  " Protocol count for the given timeframe "
  newProtocolCount: BigInt!
  " User count "
  userCount: BigInt!
  " User count for the given timeframe "
  newUserCount: BigInt!
  " Token count "
  tokenCount: BigInt!
  " Token count for the given timeframe "
  newTokenCount: BigInt!
  " Master contract count "
  masterContractCount: BigInt!
  " Master contract count for the given timeframe "
  newMasterContractCount: BigInt!
  " Clone count "
  cloneCount: BigInt!
  " Clone count for the given timeframe "
  newCloneCount: BigInt!
  " Flash loan count "
  flashloanCount: BigInt!
  " Flash loan count for the given timeframe "
  newFlashloanCount: BigInt!
  " Transaction count "
  transactionCount: BigInt!
  " Transaction count for the given timeframe "
  newTransactionCount: BigInt!
  " Strategy count "
  strategyCount: BigInt!
  " Strategy for the given timeframe "
  newStrategyCount: BigInt!
  " Active strategy count "
  activeStrategyCount: BigInt!
  " Active strategy count for the given timeframe "
  newActiveStrategyCount: BigInt!
  " Pending strategy count "
  pendingStrategyCount: BigInt!
  " Pending strategy count for the given timeframe "
  newPendingStrategyCount: BigInt!
}

type StrategyDailyKpi @entity {
  " created by id, infix '-day-' and unix timestamp, e.g. '0x00..00-day-1657270000'"
  id: ID!
  " The Strategy this KPI belongs to "
  strategy: Strategy!
  " Start date "
  date: Int!
  " Harvest count "
  harvestCount: BigInt!
  " Invest or divest count "
  investOrDivestCount: BigInt!
  " Invest count "
  investCount: BigInt!
  " Invested "
  invested: BigInt!
  " Divest count "
  divestCount: BigInt!
  " Divested"
  divested: BigInt!
  " Profit or loss count "
  profitOrLossCount: BigInt!
  " Profit count "
  profitCount: BigInt!
  " Loss count "
  lossCount: BigInt!
  " Profit & Loss"
  profitAndLoss: BigInt!
  " APR "
  apr: BigDecimal
  " Utilization "
  utilization: BigDecimal
  " Harvest count for the given timeframe "
  newHarvestCount: BigInt!
  " Invest or divest count for the given timeframe "
  newInvestOrDivestCount: BigInt!
  " Invest count for the given timeframe "
  newInvestCount: BigInt!
  " Invested for the given timeframe "
  newInvested: BigInt!
  " Divest count for the given timeframe "
  newDivestCount: BigInt!
  " Divested for the given timeframe "
  newDivested: BigInt!
  " Profit or loss count for the given timeframe "
  newProfitOrLossCount: BigInt!
  " Profit count for the given timeframe "
  newProfitCount: BigInt!
  " Loss count for the given timeframe "
  newLossCount: BigInt!
  " Profit & Los for the given timeframe "
  newProfitAndLoss: BigInt!
  " APR for the given timeframe "
  newApr: BigDecimal
  " Utilization for the given timeframe "
  newUtilization: BigDecimal
}

type StrategyHourlyKpi @entity {
  " created by id, infix '-hour-' and unix timestamp, e.g. '0x00..00-hour-1657270000'"
  id: ID!
  " The Strategy this KPI belongs to "
  strategy: Strategy!
  " Start date "
  date: Int!
  " Harvest count "
  harvestCount: BigInt!
  " Invest or divest count "
  investOrDivestCount: BigInt!
  " Invest count "
  investCount: BigInt!
  " Invested "
  invested: BigInt!
  " Divest count "
  divestCount: BigInt!
  " Divested"
  divested: BigInt!
  " Profit or loss count "
  profitOrLossCount: BigInt!
  " Profit count "
  profitCount: BigInt!
  " Loss count "
  lossCount: BigInt!
  " Profit & Loss"
  profitAndLoss: BigInt!
  " APR "
  apr: BigDecimal
  " Utilization "
  utilization: BigDecimal
  " Harvest count for the given timeframe "
  newHarvestCount: BigInt!
  " Invest or divest count for the given timeframe "
  newInvestOrDivestCount: BigInt!
  " Invest count for the given timeframe "
  newInvestCount: BigInt!
  " Invested for the given timeframe "
  newInvested: BigInt!
  " Divest count for the given timeframe "
  newDivestCount: BigInt!
  " Divested for the given timeframe "
  newDivested: BigInt!
  " Profit or loss count for the given timeframe "
  newProfitOrLossCount: BigInt!
  " Profit count for the given timeframe "
  newProfitCount: BigInt!
  " Loss count for the given timeframe "
  newLossCount: BigInt!
  " Profit & Los for the given timeframe "
  newProfitAndLoss: BigInt!
  " APR for the given timeframe "
  newApr: BigDecimal
  " Utilization for the given timeframe "
  newUtilization: BigDecimal
}

type TokenHourlyKpi @entity {
  " created by id, infix '-hour-' and unix timestamp, e.g. '0x00..00-hour-1657270000'"
  id: ID!
  " Token this KPI belongs to "
  token: Token!
  " Liquidity "
  liquidity: BigInt!
  " Liquidity for the given timeframe "
  newLiquidity: BigInt!
  " Strategy count "
  strategyCount: BigInt!
  " Strategy count for the given timeframe "
  newStrategyCount: BigInt!
}

type TokenDailyKpi @entity {
  " created by id, infix '-day-' and unix timestamp, e.g. '0x00..00-day-1657270000'"
  id: ID!
  " Token this KPI belongs to "
  token: Token!
  " Liquidity "
  liquidity: BigInt!
  " Liquidity for the given timeframe "
  newLiquidity: BigInt!
  " Strategy count "
  strategyCount: BigInt!
  " Strategy count for the given timeframe "
  newStrategyCount: BigInt!
}
