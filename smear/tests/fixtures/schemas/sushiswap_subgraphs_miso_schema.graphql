
" These are based on the contracts public variable 'marketTemplate', not to be confused with the id returned from the event AuctionTemplateAdded (which is just an index) "
enum AuctionType {
  CROWDSALE # template id 1
  DUTCH # template id 2
  BATCH # template id 3
  HYBERBOLIC # template id 4
}

type Role @entity {
  id: ID!
}

type AccessControl @entity {
  id: ID!
  adminCount: BigInt!
  minterCount: BigInt!
  operatorCount: BigInt!
  smartContractCount: BigInt!
}

type Factory @entity {
  id: ID!
  templates: [Template!] @derivedFrom(field: "factory")
  auctions: [Auction!] @derivedFrom(field: "factory")
}

type Template @entity {
  id: ID!
  templateId: BigInt!
  type: AuctionType!
  factory: Factory!
  auctions: [Auction!] @derivedFrom(field: "template")
  removed: Boolean!
  block: BigInt!
  timestamp: BigInt!
}

type Auction @entity {
  id: ID!
  factory: Factory!
  type: AuctionType!
  template: Template!
  startTime: BigInt!
  endTime: BigInt!

  auctionToken: Token!
  bidToken: Token!
  totalTokens: BigInt!
  priceDrop: BigInt!

  # Only used for Crowdsale
  priceRate: BigInt!
  priceGoal: BigInt!

  # Only used for Dutch
  startPrice: BigInt!
  minimumPrice: BigInt!

  # Only used for Batch
  # minimumRaised: BigInt!
  amountRaised: BigInt!

  pointList: PointList
  usePointList: Boolean!
  documents: DocumentCollection!

  participants: [Participant!] @derivedFrom(field: "auction")
  participantCount: BigInt!
  commitments: [Commitment!] @derivedFrom(field: "auction")
  commitmentCount: BigInt!
  committed: BigInt!

  deploymentTimestamp: BigInt!
  finalized: Boolean!
  finalizedTimestamp: BigInt
  cancelled: Boolean!
  cancelledTimestamp: BigInt
}

" collection of documents, including website, whitepaper, social media, logos etc."
type DocumentCollection @entity {
  " Same as auction id "
  id: ID!
  website: String
  whitepaper: String
  tokenomics: String
  category: String
  icon: String
  desktopBanner: String
  mobileBanner: String
  description: String
  twitter: String
  github: String
  telegram: String
  wechat: String
  discord: String
  reddit: String
  medium: String
}

type Token @entity {
  id: ID!
  symbol: String!
  symbolSuccess: Boolean!
  name: String!
  nameSuccess: Boolean!
  decimals: BigInt!
  decimalsSuccess: Boolean!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
}

type Participant @entity {
  id: ID!
  auction: Auction!
  user: User!
  commitments: [Commitment!] @derivedFrom(field: "participant")
}

type User @entity {
  id: ID!
  role: Role!
  participated: [Participant!] @derivedFrom(field: "user")
  commitments: [Commitment!] @derivedFrom(field: "user")
}

type Commitment @entity {
  id: ID!
  auction: Auction!
  user: User!
  participant: Participant!
  amount: BigInt!
  transactionHash: Bytes!
  block: BigInt!
  timestamp: BigInt!
}

type PointList @entity {
  " auction address : pointList address "
  id: ID!
  auction: Auction!
  points: [Point!] @derivedFrom(field: "pointList")
}

type Point @entity {
  "user address : pointList address"
  id: ID!
  pointList: PointList!
  auction: Auction!
  user: User!
  amount: BigInt!
}