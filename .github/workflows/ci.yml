name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  workflow_dispatch:
  schedule: [cron: "0 1 */7 * *"]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings -C debuginfo=0 -C codegen-units=16
  RUST_BACKTRACE: 1
  nightly: nightly
  stable: stable

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Check formatting
      run: cargo fmt --all -- --check


  # Apply clippy lints
  clippy:
    name: clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Apply clippy lints
      run: cargo hack clippy --each-feature

  # Run tests on some extra platforms
  cross:
    name: cross
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - aarch64-linux-android
          - aarch64-unknown-linux-musl
          - i686-linux-android
          - x86_64-linux-android
          - i686-pc-windows-gnu
          - x86_64-pc-windows-gnu
          - i686-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          # - mips64-unknown-linux-gnuabi64
          - riscv64gc-unknown-linux-gnu
          - wasm32-unknown-unknown
          - wasm32-unknown-emscripten
          - wasm32-wasip1
          - wasm32-wasip1-threads
          - wasm32-wasip2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cross-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cross-
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: cargo build --target ${{ matrix.target }}
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --target ${{ matrix.target }} 

  build:
    name: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    - name: Cache cargo build and registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v4
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run build
      run: cargo hack build --each-feature
  
  test:
    name: test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    - name: Cache cargo build and registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-test-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v4
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Use lld-link (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y llvm
        $LLVM = (Get-Command lld-link.exe).Source | Split-Path -Parent
        echo "RUSTFLAGS=${env:RUSTFLAGS} -C linker=lld-link -C link-arg=/DEBUG:FASTLINK -C link-arg=/INCREMENTAL:NO" >> $env:GITHUB_ENV
        lld-link /V
    - name: Install LLVM + LLD and use ld64.lld (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install llvm lld

        LLVM_PREFIX="$(brew --prefix llvm)"
        LLD_PREFIX="$(brew --prefix lld)"
        LLD_PATH="$LLD_PREFIX/bin/ld64.lld"

        # Sanity checks (helpful in logs)
        echo "LLVM_PREFIX=$LLVM_PREFIX"
        echo "LLD_PREFIX=$LLD_PREFIX"
        test -x "$LLVM_PREFIX/bin/clang" || { echo "clang missing"; exit 1; }
        test -x "$LLD_PATH" || { echo "ld64.lld missing at $LLD_PATH"; exit 1; }

        # Use Homebrew clang as the driver
        echo "PATH=$LLVM_PREFIX/bin:$PATH" >> $GITHUB_ENV
        echo "CC=$LLVM_PREFIX/bin/clang" >> $GITHUB_ENV
        echo "CXX=$LLVM_PREFIX/bin/clang++" >> $GITHUB_ENV

        # Ensure Cargo uses clang on macOS targets
        echo "CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER=$LLVM_PREFIX/bin/clang" >> $GITHUB_ENV
        echo "CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER=$LLVM_PREFIX/bin/clang" >> $GITHUB_ENV

        # Tell clang to use ld64.lld explicitly (absolute path required on macOS)
        echo "RUSTFLAGS=${RUSTFLAGS} -C linker=$LLVM_PREFIX/bin/clang -C link-arg=-fuse-ld=$LLD_PATH" >> $GITHUB_ENV

    - name: Run test
      run: cargo test --all-features -- --quiet
    

  miri-tb:
    name: miri-tb-${{ matrix.target }}-${{ matrix.cfg }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        cfg:
          - all_tests
        # Exclude invalid combinations
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: i686-unknown-linux-gnu
          - os: macos-latest
            target: powerpc64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-miri-
      - name: Install cargo-hack
        run: cargo install cargo-hack
      - name: Miri
        run: |
          bash ci/miri_tb.sh ${{ matrix.target }} ${{ matrix.cfg }}

  miri-sb:
    name: miri-sb-${{ matrix.target }}-${{ matrix.cfg }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        cfg:
          - all_tests
        # Exclude invalid combinations
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: i686-unknown-linux-gnu
          - os: macos-latest
            target: powerpc64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-miri-
      - name: Install cargo-hack
        run: cargo install cargo-hack
      - name: Miri
        run: |
          bash ci/miri_sb.sh ${{ matrix.target }} ${{ matrix.cfg }}
  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs:
      - rustfmt
      - clippy
      - build
      - cross
      - test
    steps:
      - uses: actions/checkout@v5
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Cache ~/.cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-coverage-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-coverage-cargo-build-target
      - name: Run tarpaulin
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: "--cfg all_tests"
        with:
          command: tarpaulin
          args: --all-features --run-types tests --run-types doctests --workspace --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}
          fail_ci_if_error: true
